// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package message

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage(in *jlexer.Lexer, out *WordsOfWisdomResponsePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "author":
			out.Author = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage(out *jwriter.Writer, in WordsOfWisdomResponsePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WordsOfWisdomResponsePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WordsOfWisdomResponsePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WordsOfWisdomResponsePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WordsOfWisdomResponsePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage(l, v)
}
func easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage1(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = MsgType(in.Int())
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage1(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage1(l, v)
}
func easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage2(in *jlexer.Lexer, out *ChallengeResponsePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "y0":
			out.Y0 = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage2(out *jwriter.Writer, in ChallengeResponsePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"y0\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Y0))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChallengeResponsePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChallengeResponsePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChallengeResponsePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChallengeResponsePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage2(l, v)
}
func easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage3(in *jlexer.Lexer, out *ChallengeRequestPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "xk":
			out.Xk = uint64(in.Uint64())
		case "k":
			out.K = int(in.Int())
		case "n":
			out.N = int(in.Int())
		case "checksum":
			out.Checksum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage3(out *jwriter.Writer, in ChallengeRequestPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"xk\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Xk))
	}
	{
		const prefix string = ",\"k\":"
		out.RawString(prefix)
		out.Int(int(in.K))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.String(string(in.Checksum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChallengeRequestPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChallengeRequestPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComSanyokbigWordsOfWisdomInternalMessage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChallengeRequestPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChallengeRequestPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComSanyokbigWordsOfWisdomInternalMessage3(l, v)
}
